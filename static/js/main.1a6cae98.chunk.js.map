{"version":3,"sources":["components/Card.js","components/NextCard.js","components/CardList.js","config/firebase/db_config.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","question","answer","NextCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawCard","bind","assertThisInitialized","lib","waves","onClick","left","Component","CardList","currentCard","length","map","list","i","key","DB_CONFIG","apiKey","process","REACT_APP_FIREBASE_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGE_SENDER_ID","NavBar","src","id","s","alt","App","updateCard","currentCards","state","cards","setState","getRandomCard","app","firebase","initializeApp","database","ref","child","newCard","Number","pin","_this2","on","snap","push","val","Math","floor","random","NavBar_NavBar","components_Card","components_NextCard","CardList_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAeeA,SAbF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYJ,EAAMK,WAEnCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,EAAMM,4BCexBC,cApBb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KAEDe,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHCA,0EAOjBG,KAAKX,MAAMe,0CAGNf,GACL,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAAST,KAAKI,UAApC,gBACed,EAAAC,EAAAC,cAACe,EAAA,KAAD,CAAMG,MAAI,GAAV,sBAfAC,aCFFC,mLAEjB,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,sBACsBO,KAAKX,MAAMwB,YAAYC,OAD7C,KAIAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZO,KAAKX,MAAMwB,YAAYE,IAAI,SAACC,EAAMC,GAAP,OAC1B3B,EAAAC,EAAAC,cAAA,OAAK0B,IAAKD,EAAGxB,UAAU,oBACpBuB,EAAKtB,SAAU,QAItBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZO,KAAKX,MAAMwB,YAAYE,IAAI,SAACC,EAAMC,GAAP,OAC1B3B,EAAAC,EAAAC,cAAA,OAAK0B,IAAKD,EAAGxB,UAAU,kBACpBuB,EAAKrB,OAAQ,iBAnBQgB,8BCGzBQ,UAAY,CAEjBC,OANQC,+DAAYC,2BAOpBC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAVoBN,+DAAYO,8BCEnBC,mLAEjB,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQd,UAAU,QAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,MAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVqC,IAAI,qEAENxC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,uBACAH,EAAAC,EAAAC,cAAA,KAAGuC,GAAG,gBAAN,0CACAzC,EAAAC,EAAAC,cAACe,EAAA,IAAD,KACEjB,EAAAC,EAAAC,cAACe,EAAA,IAAD,CAAKyB,EAAG,IACN1C,EAAAC,EAAAC,cAACe,EAAA,KAAD,KACEjB,EAAAC,EAAAC,cAAA,OACEsC,IAAI,2EACJG,IAAI,mBAHR,SAOA3C,EAAAC,EAAAC,cAACe,EAAA,KAAD,KACEjB,EAAAC,EAAAC,cAAA,OACEsC,IAAI,6EACJG,IAAI,mBAHR,aAOA3C,EAAAC,EAAAC,cAACe,EAAA,KAAD,KACEjB,EAAAC,EAAAC,cAAA,OACEsC,IAAI,qFACJG,IAAI,mBAHR,wBA/BoBtB,aCgFrBuB,cAxEb,SAAAA,EAAY7C,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMX,KA0CR8C,WAAa,WACX,IAAMC,EAAevC,EAAKwC,MAAMC,MAChCzC,EAAK0C,SAAS,CACZ1B,YAAahB,EAAK2C,cAAcJ,MA3ClCvC,EAAK4C,IAAMC,IAASC,cAAcxB,GAClCtB,EAAK+C,SAAW/C,EAAK4C,IAClBG,WACAC,MACAC,MAAM,SACTjD,EAAKwC,MAAQ,CACXC,MAAO,GACPzB,YAAa,GACbkC,QAAS,CACP,CACEhB,GAAIiB,OACJtD,SAAU,GACVC,OAAQ,GACRsD,IAAK,MAhBMpD,oFAsBE,IAAAqD,EAAAlD,KACboC,EAAepC,KAAKqC,MAAMC,MAChCtC,KAAK4C,SAASO,GAAG,cAAe,SAAAC,GAC9BhB,EAAaiB,KAAK,CAChBtB,GAAIqB,EAAKlC,IACTxB,SAAU0D,EAAKE,MAAM5D,SACrBC,OAAQyD,EAAKE,MAAM3D,OACnBsD,IAAKG,EAAKE,MAAML,MAElBC,EAAKX,SAAS,CACZD,MAAOF,EACPvB,YAAaqC,EAAKV,cAAcJ,6CAKxBA,GAEZ,OADaA,EAAamB,KAAKC,MAAMD,KAAKE,SAAWrB,EAAatB,0CAWlE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkE,EAAD,MACApE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACmE,EAAD,CACEjE,SAAUM,KAAKqC,MAAMxB,YAAYnB,SACjCC,OAAQK,KAAKqC,MAAMxB,YAAYlB,OAC/BsD,IAAKjD,KAAKqC,MAAMxB,YAAYoC,OAGhC3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoE,EAAD,CAAUxD,SAAUJ,KAAKmC,cAG3B7C,EAAAC,EAAAC,cAACqE,EAAD,CAAUhD,YAAab,KAAKqC,MAAMC,iBAlE1B3B,aCEEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a6cae98.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => (\n  <div className=\"card-container\">\n    <div className=\"card\">\n      <div className=\"front\">\n        <div className=\"question\">{props.question}</div>\n      </div>\n      <div className=\"back\">\n        <div className=\"answer\">{props.answer}</div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Button, Icon } from \"react-materialize\";\n\nclass NextCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawCard = this.drawCard.bind(this);\n  }\n\n  drawCard() {\n    this.props.drawCard();\n  }\n\n  render(props) {\n    return (\n      <div className=\"buttonContainer\">\n        <Button waves=\"light\" onClick={this.drawCard}>\n          Next Question<Icon left>autorenew</Icon>\n        </Button>\n      </div>\n    );\n  }\n}\nexport default NextCard;\n","import React, { Component } from \"react\";\nexport default class CardList extends Component {\n  render() {\n    return (\n      <div>\n        <h5 className=\"termLength\">\n          Terms in this set ({this.props.currentCard.length})\n        </h5>\n\n        <div className=\"listContainer\">\n          <div className=\"questionList\">\n            {this.props.currentCard.map((list, i) => (\n              <div key={i} className=\"listItemQuestion\">\n                {list.question}{\" \"}\n              </div>\n            ))}\n          </div>\n          <div className=\"answerList\">\n            {this.props.currentCard.map((list, i) => (\n              <div key={i} className=\"listItemAnswer\">\n                {list.answer}{\" \"}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_KEY = process.env.REACT_APP_FIREBASE_API_KEY;\nconst MESSAGING_SENDER_ID = process.env.REACT_APP_MESSAGE_SENDER_ID;\n\n\nexport const DB_CONFIG = {\n  \n        apiKey: API_KEY,\n        authDomain: \"react-flashcards-79ee1.firebaseapp.com\",\n        databaseURL: \"https://react-flashcards-79ee1.firebaseio.com\",\n        projectId: \"react-flashcards-79ee1\",\n        storageBucket: \"react-flashcards-79ee1.appspot.com\",\n        messagingSenderId: MESSAGING_SENDER_ID\n    \n}","import React, { Component } from \"react\";\nimport { Navbar, NavItem, Row, Chip, Col } from \"react-materialize\";\n\nexport default class NavBar extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar className=\"teal\">\n          <div className=\"brand-logo\"> </div>\n        </Navbar>\n        <div className=\"title\">\n          <img\n            className=\"reactLogo\"\n            src=\"https://react-etc.net/thumbs/1000x750r/2017-12/react-hexagon.png\"\n          />\n          <div>\n            <h4 className=\"titleText\">React Interview Set</h4>\n            <p id=\"titleSubText\"> Hover Over Flashcard to Reveal Answer</p>\n            <Row>\n              <Col s={12}>\n                <Chip>\n                  <img\n                    src=\"https://cdn2.iconfinder.com/data/icons/designer-skills/128/react-512.png\"\n                    alt=\"Contact Person\"\n                  />\n                  React\n                </Chip>\n                <Chip>\n                  <img\n                    src=\"https://mycareersdb.com/media/uploads/8f5d17e5b25c47ac00fb262c25fb2446.png\"\n                    alt=\"Contact Person\"\n                  />\n                  Interview\n                </Chip>\n                <Chip>\n                  <img\n                    src=\"https://cdn4.iconfinder.com/data/icons/google-i-o-2016/512/google_firebase-512.png\"\n                    alt=\"Contact Person\"\n                  />\n                  Firebase\n                </Chip>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/Card\";\nimport NextCard from \"./components/NextCard\";\nimport CardList from \"./components/CardList\";\nimport firebase, { database } from \"firebase\";\nimport \"firebase/database\";\nimport { DB_CONFIG } from \"./config/firebase/db_config\";\nimport NavBar from \"./components/NavBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app\n      .database()\n      .ref()\n      .child(\"cards\");\n    this.state = {\n      cards: [],\n      currentCard: {},\n      newCard: [\n        {\n          id: Number,\n          question: \"\",\n          answer: \"\",\n          pin: \"\"\n        }\n      ]\n    };\n  }\n\n  componentWillMount() {\n    const currentCards = this.state.cards;\n    this.database.on(\"child_added\", snap => {\n      currentCards.push({\n        id: snap.key,\n        question: snap.val().question,\n        answer: snap.val().answer,\n        pin: snap.val().pin\n      });\n      this.setState({\n        cards: currentCards,\n        currentCard: this.getRandomCard(currentCards)\n      });\n    });\n  }\n\n  getRandomCard(currentCards) {\n    const card = currentCards[Math.floor(Math.random() * currentCards.length)];\n    return card;\n  }\n\n  updateCard = () => {\n    const currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards)\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"header\">\n          <div className=\"cardRow\">\n            <Card\n              question={this.state.currentCard.question}\n              answer={this.state.currentCard.answer}\n              pin={this.state.currentCard.pin}\n            />\n          </div>\n          <div className=\"buttonRow\">\n            <NextCard drawCard={this.updateCard} />\n          </div>\n\n          <CardList currentCard={this.state.cards} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}