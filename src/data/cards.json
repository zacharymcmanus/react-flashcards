{
    "cards": [
        {
            "id": 1,
            "question": "What is React?",
            "answer": "React is an open-source frontend JavaScript library which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012."
        },
        {
            "id": 2,
            "question": "What are the major features of React?",
            "answer": "It uses VirtualDOM instead RealDOM considering that RealDOM manipulations are expensive, supports server-side rendering, follows Unidirectional data flow or data binding, and it uses reusable/composable UI components to develop the view."
        },
        {
            "id": 3,
            "question": "What is JSX?",
            "answer": "JSX is a XML-like syntax extension to ECMAScript (the acronym stands for JavaScript XML). Basically it just provides syntactic sugar for the React.createElement() function, giving us expressiveness of JavaScript along with HTML like template syntax."
        },
        {
            "id": 4,
            "question": "What is the difference between Element and Component?",
            "answer": "An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated. Acomponent can be declared in several different ways. It can be a class with a render() method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:"
        },
        {
            "id": 5,
            "question": "How do you create components in React?",
            "answer": "There are two possible ways to create a component. 1) Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements. 2) Class Components: You can also use ES6 class to define a component."
        },
        {
            "id": 6,
            "question": "When to use a Class Component over a Function Component?",
            "answer": "If the component needs state or lifecycle methods then use class component otherwise use function component. However, from React 16.8 with the addition of Hooks, you could use state, lifecycle methods and other features that were only available in class component right in your function component."
        },
        {
            "id": 7,
            "question": "What are Pure Components?",
            "answer": "React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called."
        },
        {
            "id": 8,
            "question": "What is state in React?",
            "answer": "State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components. State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any component other than the one that owns and sets it."
        },
        {
            "id": 9,
            "question": "What are props in React?",
            "answer": "Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component. The primary purpose of props in React is to provide following component functionality: 1) Pass custom data to your component. 2) Trigger state changes. 3) Use via this.props.reactProp inside component's render() method."
        },
        {
            "id": 10,
            "question": "What is the difference between state and props?",
            "answer": "Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function."
        },
        {
            "id": 11,
            "question": "Why should we not update the state directly?",
            "answer": "If you try to update the state directly, then it won't re-render the component. Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering. You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax."
        },
        {
            "id": 12,
            "question": "What is the purpose of callback function as an argument of setState()?",
            "answer": "The callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action. It is recommended to use lifecycle method rather than this callback function."
        },
        {
            "id": 13,
            "question": "What is the difference between HTML and React event handling?",
            "answer": "In HTML, the event name should be in lowercase, whereas in React it follows camelCase convention. In HTML, you can return false to prevent default behavior, Whereas in React you must call preventDefault() explicitly."
        },
        {
            "id": 14,
            "question": "How to bind methods or event handlers in JSX callbacks?",
            "answer": "There are 3 possible ways to achieve this: 1) Binding in Constructor: In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor. 2) Public class fields syntax: If you don't like to use bind approach then public class fields syntax can be used to correctly bind callbacks. 3) Arrow functions in callbacks: You can use arrow functions directly in the callbacks."
        },
        {
            "id": 15,
            "question": "How to pass a parameter to an event handler or callback?",
            "answer": "You can use an arrow function to wrap around an event handler and pass parameters: <button onClick={() => this.handleClick(id)} />. This is an equivelant to calling .bind: <button onClick={this.handleClick.bind(this, id)} />."
        },
        {
            "id": 16,
            "question": "What are synthetic events in React?",
            "answer": "SyntheticEvent is a cross-browser wrapper around the browser's native event. It's API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers."
        },
        {
            "id": 17,
            "question": "What is inline conditional expressions?",
            "answer": "You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &&."
        },
        {
            "id": 18,
            "question": "What are 'key' props and what is the benefit of using them in arrays of elements?",
            "answer": "A key is a special string attribute you should include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Most often we use IDs from our data as keys. When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort."
        },
        {
            "id": 19,
            "question": "What is the use of refs?",
            "answer": "The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component."
        },
        {
            "id": 20,
            "question": "How to create refs?",
            "answer": "There are two approaches: 1) This is a recently added approach. Refs are created using React.createRef() method and attached to React elements via the ref attribute. In order to use refs throughout the component, just assign the ref to the instance property within constructor. 2) You can also use ref callbacks approach regardless of React version. For example, the search bar component's input element accessed as follows,"
        },
        {
            "id": 21,
            "question": "What are forward refs??",
            "answer": "Ref forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child."
        },
        {
            "id": 22,
            "question": "Which is preferred option with in callback refs and findDOMNode()?",
            "answer": "It is preferred to use callback refs over findDOMNode() API. Because findDOMNode() prevents certain improvements in React in the future."
        },
        {
            "id": 23,
            "question": "Why are String Refs legacy?",
            "answer": "If you worked with React before, you might be familiar with an older API where the ref attribute is a string, like ref={'textInput'}, and the DOM node is accessed as this.refs.textInput. We advise against it because string refs have below issues, and are considered legacy. String refs were removed in React v16. 1) They force React to keep track of currently executing component. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle. 2) They are not composable — if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable. 3) They don't work with static analysis like Flow. Flow can't guess the magic that framework does to make the string ref appear on this.refs, as well as its type (which could be different). Callback refs are friendlier to static analysis. 4) It doesn't work as most people would expect with the 'render callback' pattern."
        },
        {
            "id": 24,
            "question": "What is Virtual DOM?",
            "answer": "The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the 'real' DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation."
        },
        {
            "id": 25,
            "question": "How does the Virtual DOM work?",
            "answer": "1) Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation. 2) Then the difference between the previous DOM representation and the new one is calculated. 3) Once the calculations are done, the real DOM will be updated with only the things that have actually changed."
        },
        {
            "id": 26,
            "question": "What is the difference between Shadow DOM and Virtual DOM?",
            "answer": "The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs."
        },
        {
            "id": 27,
            "question": "What is React Fiber?",
            "answer": "Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives."
        },
        {
            "id": 28,
            "question": "What is the main goal of React Fiber?",
            "answer": "The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames."
        },
        {
            "id": 29,
            "question": "What are controlled components?",
            "answer": "A component that controls the input elements within the forms on subsequent user input is called Controlled Component, i.e, every state mutation will have an associated handler function."
        },
        {
            "id": 30,
            "question": "What are uncontrolled components?",
            "answer": "The Uncontrolled Components are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML."
        }
    ]
}